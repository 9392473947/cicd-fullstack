name: cicd-ec2

on:
  push: 
    branches:
      - main
# env:
#   ECR_REPO_frontend: ${{ secrets.ECR_REPO_frontend }}  
#   ECR_REPO_backend: ${{ secrets.ECR_REPO_backend }}
#   IMAGE_TAG: latest
#   ECR_password: ${{ secrets.ECR_password }}
permissions:
      id-token: write   # âœ… Required for OIDC
      contents: read
jobs:
  build_image_deploy:
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
         role-to-assume: arn:aws:iam::015800953128:role/admin-oidc
         aws-region: ${{ secrets.AWS_REGION }}
      - name: getting the commid id as tag
        run: |
           echo "COMMIT_ID=$(git rev-parse --short=6 HEAD)" >> $GITHUB_ENV  
      - name: Login to AWS ECR
        run: | 
           # aws ecr get-login-password --region ${{ secrets.AWS_REGION}} | docker login --username AWS --password-stdin $ECR_password
           aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 015800953128.dkr.ecr.us-east-1.amazonaws.com
      - name: Build Docker image
        run: |
          docker build -t backend ./backend/
          docker build -t frontend ./frontend/
      - name: Push image to ECR
        run: |
          docker tag backend:latest ${{ secrets.ECR_REPO_backend }}:$COMMIT_ID
          docker tag frontend:latest ${{ secrets.ECR_REPO_frontend }}:$COMMIT_ID
          docker push ${{ secrets.ECR_REPO_backend }}:$COMMIT_ID
          docker push ${{ secrets.ECR_REPO_frontend }}:$COMMIT_ID
      - name: Deploy to EC2 instance
        env:
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}  
          SSH_USER: ${{ secrets.SSH_USER }}    
          SSH_IP: ${{ secrets.SSH_IP }}
        run: |
          echo "$SSH_KEY" > kartik-keypair.pem
          sudo chmod 400 kartik-keypair.pem
          ssh -o StrictHostKeyChecking=no -i kartik-keypair.pem $SSH_USER@$SSH_IP << 'EOF'
            sudo apt update
            sudo apt upgrade -y
            sudo apt install docker.io -y || true
            sudo systemctl enable docker || true
            sudo systemctl start docker || true
            sudo docker stop backend || true
            sudo docker rm backend || true
            sudo docker stop frontend || true
            sudo docker rm frontend || true
            sudo docker rmi ${{ secrets.ECR_REPO_backend }}:$COMMIT_ID || true
            sudo docker rmi ${{ secrets.ECR_REPO_frontend }}:$COMMIT_ID || true
            # sudo docker stop mysql-container || true
            # sudo docker rm mysql-container || true
            sudo docker run -d --name mysql-container -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=kartikdatabase  -e MYSQL_USER=kartikuser -e MYSQL_PASSWORD=password -p 3300:3306 mysql:latest || true
            docker pull ${{ secrets.ECR_REPO_backend }}:$COMMIT_ID
            docker pull ${{ secrets.ECR_REPO_frontend }}:$COMMIT_ID
            sudo docker run --name=backend -p 5000:5000 -d ${{ secrets.ECR_REPO_backend }}:$COMMIT_ID
            sudo docker run --name=frontend -p 3000:80 -d ${{ secrets.ECR_REPO_frontend }}:$COMMIT_ID
          EOF
